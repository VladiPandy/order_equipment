SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

-- Создаем расширение pg_cron
CREATE EXTENSION IF NOT EXISTS pg_cron;

CREATE TABLE IF NOT EXISTS public.projects_booking (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	project_id uuid NOT NULL,
	date_booking date NOT NULL,
	analyse_id uuid NOT NULL,
	equipment_id uuid NOT NULL,
	executor_id uuid NOT NULL,
	count_analyses int4 NOT NULL,
	status varchar(254) NOT NULL,
	is_delete bool NULL,
	"comment" text NULL,
	CONSTRAINT projects_booking_id PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.block_booking (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	project_id uuid NOT NULL,
    booking_id int4 NOT NULL,
	date_booking date NULL,
	analyse_id uuid NULL,
	equipment_id uuid NULL,
	executor_id uuid NULL,
	is_block bool NULL,
	write_timestamp timestamp NOT NULL DEFAULT now(),
	cookies_key uuid NOT NULL DEFAULT gen_random_uuid(),
	update_timestamp timestamp NULL,
	id_delete bool NULL DEFAULT false,
	CONSTRAINT block_booking_id PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.feedback_task (
	booking_id int4 NOT NULL,
	question_1 bool NOT NULL DEFAULT True,
	question_2 bool NOT NULL DEFAULT True,
    question_3 bool NOT NULL DEFAULT True,
	CONSTRAINT block_booking_id PRIMARY KEY (booking_id)
);

-- Создаем функцию для обновления статуса
CREATE OR REPLACE FUNCTION public.update_booking_status()
RETURNS integer
LANGUAGE plpgsql
AS $$
DECLARE
    updated_count integer;
BEGIN
    -- Обновляем статус для всех записей, где статус 'Согласовано'
    UPDATE public.projects_booking
    SET status = 'Оценить'
    WHERE status = 'Согласовано'
    AND is_delete = false
    RETURNING COUNT(*) INTO updated_count;
    
    -- Логируем количество обновленных записей
    RAISE NOTICE 'Обновлено % записей', updated_count;
    
    RETURN updated_count;
END;
$$;

-- Добавляем комментарий к функции
COMMENT ON FUNCTION public.update_booking_status IS 'Обновляет статус бронирования с "Согласовано" на "Оценить" для записей текущего дня';

-- Создаем задачу, которая будет запускаться каждый день в 00:01
SELECT cron.schedule('update_booking_status', '1 0 * * *', $$
    SELECT public.update_booking_status();
$$);